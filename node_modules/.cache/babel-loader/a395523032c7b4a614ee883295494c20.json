{"ast":null,"code":"import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  const [board, setBoard] = useState(createBoard());\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  function createBoard() {\n    let initialBoard = []; // TODO: create array-of-arrays of true/false values ✅\n\n    for (let i = 0; i < nrows; i++) {\n      const row = [];\n      initialBoard.push(row);\n\n      for (let j = 0; j < ncols; j++) {\n        row.push(Math.floor(Math.random() * chanceLightStartsOn));\n      }\n    }\n\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won. \n    // all lights are turned off (f)\n    for (let i = 0; i < nrows; i++) {\n      for (let j = 0; j < ncols; j++) {\n        if (board[i][j]) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n    }\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      }; // TODO: Make a (deep) copy of the oldBoard\n      // TODO: in the copy, flip this cell and the cells around it\n      // TODO: return the copy\n\n    });\n  } // if the game is won, just show a winning msg & render nothing else\n  // TODO\n  // make table board\n  // TODO\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/gabriela/2021/Coding/SB/Exercises/react-lights-out/src/Board.js"],"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","i","row","push","j","Math","floor","random","hasWon","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,KAAF;AAASC,EAAAA,KAAT;AAAgBC,EAAAA;AAAhB,CAAf,EAAsD;AACpD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACQ,WAAW,EAAZ,CAAlC;AAEA;;AACA,WAASA,WAAT,GAAuB;AACrB,QAAIC,YAAY,GAAG,EAAnB,CADqB,CAErB;;AACA,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACP,KAAhB,EAAuBO,CAAC,EAAxB,EAA4B;AAC1B,YAAMC,GAAG,GAAG,EAAZ;AACAF,MAAAA,YAAY,CAACG,IAAb,CAAkBD,GAAlB;;AACA,WAAK,IAAIE,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACT,KAAhB,EAAuBS,CAAC,EAAxB,EAA4B;AAC1BF,QAAAA,GAAG,CAACC,IAAJ,CAASE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBX,mBAA3B,CAAT;AACD;AACF;;AACD,WAAOI,YAAP;AACD;;AAED,WAASQ,MAAT,GAAkB;AAChB;AACA;AACA,SAAK,IAAIP,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACP,KAAhB,EAAuBO,CAAC,EAAxB,EAA4B;AAC1B,WAAK,IAAIG,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACT,KAAhB,EAAuBS,CAAC,EAAxB,EAA4B;AAC1B,YAAIP,KAAK,CAACI,CAAD,CAAL,CAASG,CAAT,CAAJ,EAAiB;AACf,iBAAO,KAAP;AACD,SAFD,MAGK;AACH,iBAAO,IAAP;AACD;AACF;AACF;AACF;;AAED,WAASK,eAAT,CAAyBC,KAAzB,EAAgC;AAC9BZ,IAAAA,QAAQ,CAACa,QAAQ,IAAI;AACnB,YAAM,CAACC,CAAD,EAAIC,CAAJ,IAASH,KAAK,CAACI,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAAf;;AAEA,YAAMC,QAAQ,GAAG,CAACL,CAAD,EAAIC,CAAJ,EAAOK,SAAP,KAAqB;AACpC;AAEA,YAAIL,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGlB,KAAd,IAAuBiB,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGlB,KAAzC,EAAgD;AAC9CwB,UAAAA,SAAS,CAACN,CAAD,CAAT,CAAaC,CAAb,IAAkB,CAACK,SAAS,CAACN,CAAD,CAAT,CAAaC,CAAb,CAAnB;AACD;AACF,OAND,CAHmB,CAWnB;AAEA;AAEA;;AACD,KAhBO,CAAR;AAiBD,GAlDmD,CAoDpD;AAEA;AAEA;AAEA;;AACD;;AAED,eAAepB,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values ✅\n    for (let i=0; i<nrows; i++) {\n      const row = [];\n      initialBoard.push(row);\n      for (let j=0; j<ncols; j++) {\n        row.push(Math.floor(Math.random() * chanceLightStartsOn))\n      }\n    }\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won. \n    // all lights are turned off (f)\n    for (let i=0; i<nrows; i++) {\n      for (let j=0; j<ncols; j++) {\n        if (board[i][j]) {\n          return false;\n        }\n        else {\n          return true;\n        }\n      }\n    }\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}